{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyril\\\\IdeaProjects\\\\car-maintenance-tracker\\\\frontend\\\\src\\\\ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useMemo, useState, useContext } from \"react\";\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\n\n// Define your bronze dark theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const darkTheme = createTheme({\n  palette: {\n    mode: \"dark\",\n    background: {\n      default: \"#1e1e1e\",\n      paper: \"#2c2c2c\"\n    },\n    primary: {\n      main: \"#cd7f32\",\n      // Bronze\n      contrastText: \"#fff\"\n    },\n    text: {\n      primary: \"#ffffff\",\n      secondary: \"#aaaaaa\"\n    }\n  }\n});\n\n// Light theme for comparison\nexport const lightTheme = createTheme({\n  palette: {\n    mode: \"light\",\n    background: {\n      default: \"#f5f5f5\",\n      paper: \"#fff\"\n    },\n    primary: {\n      main: \"#1976d2\" // blue\n    }\n  }\n});\n\n// Create toggle context\nexport const ThemeToggleContext = /*#__PURE__*/createContext({\n  toggleTheme: () => {}\n});\n\n// Export this and wrap your <App /> in it\nexport const CustomThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [mode, setMode] = useState(\"light\");\n  const toggleTheme = () => {\n    setMode(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n  const theme = useMemo(() => mode === \"light\" ? lightTheme : darkTheme, [mode]);\n  return /*#__PURE__*/_jsxDEV(ThemeToggleContext.Provider, {\n    value: {\n      toggleTheme,\n      mode\n    },\n    children: /*#__PURE__*/_jsxDEV(ThemeProvider, {\n      theme: theme,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook (optional)\n_s(CustomThemeProvider, \"cbR/ILtTcGQBxvCvj3m4ZPbHb9Q=\");\n_c = CustomThemeProvider;\nexport const useThemeToggle = () => {\n  _s2();\n  return useContext(ThemeToggleContext);\n};\n_s2(useThemeToggle, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"CustomThemeProvider\");","map":{"version":3,"names":["React","createContext","useMemo","useState","useContext","ThemeProvider","createTheme","jsxDEV","_jsxDEV","darkTheme","palette","mode","background","default","paper","primary","main","contrastText","text","secondary","lightTheme","ThemeToggleContext","toggleTheme","CustomThemeProvider","children","_s","setMode","prev","theme","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useThemeToggle","_s2","$RefreshReg$"],"sources":["C:/Users/kyril/IdeaProjects/car-maintenance-tracker/frontend/src/ThemeContext.js"],"sourcesContent":["import React, { createContext, useMemo, useState, useContext } from \"react\";\r\nimport { ThemeProvider, createTheme } from \"@mui/material/styles\";\r\n\r\n// Define your bronze dark theme\r\nexport const darkTheme = createTheme({\r\n  palette: {\r\n    mode: \"dark\",\r\n    background: {\r\n      default: \"#1e1e1e\",\r\n      paper: \"#2c2c2c\",\r\n    },\r\n    primary: {\r\n      main: \"#cd7f32\", // Bronze\r\n      contrastText: \"#fff\",\r\n    },\r\n    text: {\r\n      primary: \"#ffffff\",\r\n      secondary: \"#aaaaaa\",\r\n    },\r\n  },\r\n});\r\n\r\n// Light theme for comparison\r\nexport const lightTheme = createTheme({\r\n  palette: {\r\n    mode: \"light\",\r\n    background: {\r\n      default: \"#f5f5f5\",\r\n      paper: \"#fff\",\r\n    },\r\n    primary: {\r\n      main: \"#1976d2\", // blue\r\n    },\r\n  },\r\n});\r\n\r\n// Create toggle context\r\nexport const ThemeToggleContext = createContext({\r\n  toggleTheme: () => {},\r\n});\r\n\r\n// Export this and wrap your <App /> in it\r\nexport const CustomThemeProvider = ({ children }) => {\r\n  const [mode, setMode] = useState(\"light\");\r\n\r\n  const toggleTheme = () => {\r\n    setMode(prev => (prev === \"light\" ? \"dark\" : \"light\"));\r\n  };\r\n\r\n  const theme = useMemo(() => (mode === \"light\" ? lightTheme : darkTheme), [mode]);\r\n\r\n  return (\r\n    <ThemeToggleContext.Provider value={{ toggleTheme, mode }}>\r\n      <ThemeProvider theme={theme}>\r\n        {children}\r\n      </ThemeProvider>\r\n    </ThemeToggleContext.Provider>\r\n  );\r\n};\r\n\r\n// Hook (optional)\r\nexport const useThemeToggle = () => useContext(ThemeToggleContext);\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,OAAO,EAAEC,QAAQ,EAAEC,UAAU,QAAQ,OAAO;AAC3E,SAASC,aAAa,EAAEC,WAAW,QAAQ,sBAAsB;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,SAAS,GAAGH,WAAW,CAAC;EACnCI,OAAO,EAAE;IACPC,IAAI,EAAE,MAAM;IACZC,UAAU,EAAE;MACVC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE;IACT,CAAC;IACDC,OAAO,EAAE;MACPC,IAAI,EAAE,SAAS;MAAE;MACjBC,YAAY,EAAE;IAChB,CAAC;IACDC,IAAI,EAAE;MACJH,OAAO,EAAE,SAAS;MAClBI,SAAS,EAAE;IACb;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAGd,WAAW,CAAC;EACpCI,OAAO,EAAE;IACPC,IAAI,EAAE,OAAO;IACbC,UAAU,EAAE;MACVC,OAAO,EAAE,SAAS;MAClBC,KAAK,EAAE;IACT,CAAC;IACDC,OAAO,EAAE;MACPC,IAAI,EAAE,SAAS,CAAE;IACnB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMK,kBAAkB,gBAAGpB,aAAa,CAAC;EAC9CqB,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnD,MAAM,CAACd,IAAI,EAAEe,OAAO,CAAC,GAAGvB,QAAQ,CAAC,OAAO,CAAC;EAEzC,MAAMmB,WAAW,GAAGA,CAAA,KAAM;IACxBI,OAAO,CAACC,IAAI,IAAKA,IAAI,KAAK,OAAO,GAAG,MAAM,GAAG,OAAQ,CAAC;EACxD,CAAC;EAED,MAAMC,KAAK,GAAG1B,OAAO,CAAC,MAAOS,IAAI,KAAK,OAAO,GAAGS,UAAU,GAAGX,SAAU,EAAE,CAACE,IAAI,CAAC,CAAC;EAEhF,oBACEH,OAAA,CAACa,kBAAkB,CAACQ,QAAQ;IAACC,KAAK,EAAE;MAAER,WAAW;MAAEX;IAAK,CAAE;IAAAa,QAAA,eACxDhB,OAAA,CAACH,aAAa;MAACuB,KAAK,EAAEA,KAAM;MAAAJ,QAAA,EACzBA;IAAQ;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAElC,CAAC;;AAED;AAAAT,EAAA,CAlBaF,mBAAmB;AAAAY,EAAA,GAAnBZ,mBAAmB;AAmBhC,OAAO,MAAMa,cAAc,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMjC,UAAU,CAACiB,kBAAkB,CAAC;AAAA;AAACgB,GAAA,CAAtDD,cAAc;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}